{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Projects\\\\Webstorm\\\\crypto-shop\\\\node_modules\\\\@angular-devkit\\\\build-angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { ActivatedRouteSnapshot, Router, RouterStateSnapshot } from '@angular/router';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport class JwtAuthGuard {\n  constructor(router) {\n    this.router = router;\n  }\n\n  canActivate(route, state) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const hasAuth = localStorage.getItem('authorization') !== null;\n      console.log(hasAuth);\n\n      if (!hasAuth) {\n        yield _this.router.navigateByUrl('auth/login');\n      }\n\n      return hasAuth;\n    })();\n  }\n\n}\n\nJwtAuthGuard.ɵfac = function JwtAuthGuard_Factory(t) {\n  return new (t || JwtAuthGuard)(i0.ɵɵinject(i1.Router));\n};\n\nJwtAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: JwtAuthGuard,\n  factory: JwtAuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Projects/Webstorm/crypto-shop/libs/ui-lib-shared/src/lib/guards/jwt-auth-guard.service.ts"],"names":["ActivatedRouteSnapshot","Router","RouterStateSnapshot","i0","i1","JwtAuthGuard","constructor","router","canActivate","route","state","hasAuth","localStorage","getItem","console","log","navigateByUrl","ɵfac","JwtAuthGuard_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,SAASA,sBAAT,EAAiCC,MAAjC,EAAyCC,mBAAzC,QAAqE,iBAArE;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,iBAApB;AACA,OAAO,MAAMC,YAAN,CAAmB;AACtBC,EAAAA,WAAW,CAACC,MAAD,EAAS;AAChB,SAAKA,MAAL,GAAcA,MAAd;AACH;;AACKC,EAAAA,WAAW,CAACC,KAAD,EAAQC,KAAR,EAAe;AAAA;;AAAA;AAC5B,YAAMC,OAAO,GAAGC,YAAY,CAACC,OAAb,CAAqB,eAArB,MAA0C,IAA1D;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ;;AACA,UAAI,CAACA,OAAL,EAAc;AACV,cAAM,KAAI,CAACJ,MAAL,CAAYS,aAAZ,CAA0B,YAA1B,CAAN;AACH;;AACD,aAAOL,OAAP;AAN4B;AAO/B;;AAXqB;;AAa1BN,YAAY,CAACY,IAAb,GAAoB,SAASC,oBAAT,CAA8BC,CAA9B,EAAiC;AAAE,SAAO,KAAKA,CAAC,IAAId,YAAV,EAAwBF,EAAE,CAACiB,QAAH,CAAYhB,EAAE,CAACH,MAAf,CAAxB,CAAP;AAAyD,CAAhH;;AACAI,YAAY,CAACgB,KAAb,GAAqB,aAAclB,EAAE,CAACmB,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAElB,YAAT;AAAuBmB,EAAAA,OAAO,EAAEnB,YAAY,CAACY,IAA7C;AAAmDQ,EAAAA,UAAU,EAAE;AAA/D,CAAtB,CAAnC","sourcesContent":["import { ActivatedRouteSnapshot, Router, RouterStateSnapshot, } from '@angular/router';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/router\";\r\nexport class JwtAuthGuard {\r\n    constructor(router) {\r\n        this.router = router;\r\n    }\r\n    async canActivate(route, state) {\r\n        const hasAuth = localStorage.getItem('authorization') !== null;\r\n        console.log(hasAuth);\r\n        if (!hasAuth) {\r\n            await this.router.navigateByUrl('auth/login');\r\n        }\r\n        return hasAuth;\r\n    }\r\n}\r\nJwtAuthGuard.ɵfac = function JwtAuthGuard_Factory(t) { return new (t || JwtAuthGuard)(i0.ɵɵinject(i1.Router)); };\r\nJwtAuthGuard.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: JwtAuthGuard, factory: JwtAuthGuard.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}